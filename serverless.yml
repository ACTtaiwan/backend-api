# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: taiwanwatch-volunteer-site-api # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# Use serverless-webpack plugin to transpile ES6/ES7
plugins:
  - serverless-webpack

# Enable auto-packing of external modules
custom:
  webpackIncludeModules: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  environment:
    VOLUNTEER_USERS_DYNAMODB_TABLE: "volunteer.users"
    VOLUNTEER_BILLS_DYNAMODB_TABLE: "volunteer.bills"
    VOLUNTEER_BILLTYPES_DYNAMODB_TABLE: "volunteer.billTypes"
    VOLUNTEER_BILLACTIONS_DYNAMODB_TABLE: "volunteer.billActions"
    VOLUNTEER_BILLVERSIONS_DYNAMODB_TABLE: "volunteer.billVersions"
    VOLUNTEER_BILLCATEGORIES_DYNAMODB_TABLE: "volunteer.billCategories"
    VOLUNTEER_ROLES_DYNAMODB_TABLE: "volunteer.roles"
    VOLUNTEER_TASKS_DYNAMODB_TABLE: "volunteer.tasks"
    VOLUNTEER_SUBMISSIONS_DYNAMODB_TABLE: "volunteer.submissions"
    VOLUNTEER_BILLDOWNLOADTASK_DYNAMODB_TABLE: "volunteer.billDownloadTask"
    VOLUNTEER_BILLS_S3_BUCKET: "volunteer.bills"
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
        - s3:PutObjectAcl
      Resource: "arn:aws:s3:::*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**


functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /bill
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role

  users-logon:
    handler: functions/public/auth/logon.main
    events:
      - http:
          path: users/logon
          method: post
          cors: true

  dashboard-userRecord:
    handler: functions/private/dashboard/userRecord.main
    events:
      - http:
          path: dashboard/userRecord
          method: get
          cors: true
          authorizer: aws_iam

  billDownload-uploadUrl:
    handler: functions/private/billDownload/uploadUrl.main
    events:
      - http:
          path: billDownload/uploadUrl
          method: post
          cors: true
          authorizer: aws_iam

  billMgmt-bills:
    handler: functions/private/billManagement/bills.main
    events:
      - http:
          path: billManagement/bills
          method: get
          cors: true
      - http:
          path: billManagement/bills/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          cors: true
      - http:
          path: billManagement/bills
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: billManagement/bills
          method: put
          cors: true
          authorizer: aws_iam

  billMgmt-billTypes:
    handler: functions/private/billManagement/billTypes.main
    events:
      - http:
          path: billManagement/billTypes
          method: get
          cors: true
  
  billMgmt-billActions:
    handler: functions/private/billManagement/billActions.main
    events:
      - http:
          path: billManagement/billActions
          method: get
          cors: true

  billMgmt-billVersions:
    handler: functions/private/billManagement/billVersions.main
    events:
      - http:
          path: billManagement/billVersions
          method: get
          cors: true

  billMgmt-billCategories:
    handler: functions/private/billManagement/billCategories.main
    events:
      - http:
          path: billManagement/billCategories
          method: get
          cors: true
  
  billMgmt-sponsors:
    handler: functions/private/billManagement/sponsors.main
    events:
      - http:
          path: billManagement/sponsors
          method: get
          cors: true
      - http:
          path: billManagement/sponsors/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          cors: true
      - http:
          path: billManagement/sponsors
          method: post
          cors: true

  billMgmt-cosponsors:
    handler: functions/private/billManagement/cosponsors.main
    events:
      - http:
          path: billManagement/cosponsors
          method: post
          cors: true
          authorizer: aws_iam

  billMgmt-addBillCategory:
    handler: functions/private/billManagement/addBillCategory.main
    events:
      - http:
          path: billManagement/addBillCategory
          method: put
          cors: true
          authorizer: aws_iam
  
  billMgmt-removeBillCategory:
    handler: functions/private/billManagement/removeBillCategory.main
    events:
      - http:
          path: billManagement/removeBillCategory
          method: delete
          cors: true
          authorizer: aws_iam

  congGov-parse:
    handler: functions/private/congressGovAgent/congressGovHandler.main
    events:
      - http:
          path: congressGov/parseText
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: congressGov/parseText
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: congressGov/parseText
          method: put
          cors: true
          authorizer: aws_iam
      - http:
          path: congressGov/parseAllInfo
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: congressGov/parseAllInfo
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: congressGov/parseAllInfo
          method: put
          cors: true
          authorizer: aws_iam

  dynamodbSync-bill:
    handler: functions/events/bills/dynamodbSync.main
    events:
      - stream:
        arn: arn:aws:dynamodb:us-east-1:537713963720:table/volunteer.bills/stream/2017-12-23T09:01:21.034
        batchSize: 1
        startingPosition: TRIM_HORIZON
        enabled: true

  upload-billsBucket:
    handler: functions/events/bills/pdfUpload.main
    events:
      - s3:
          bucket: ${self:provider.environment.VOLUNTEER_BILLS_S3_BUCKET}
          event: s3:ObjectCreated:*

  googleApi:
    handler: functions/private/googleApi/googleApiHandler.main
    events:
      - http:
          path: googleApi/queryBillSheet
          method: get
          cors: true
          authorizer: aws_iam

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    # USERS
    VolunteerUsersDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.VOLUNTEER_USERS_DYNAMODB_TABLE}
    # BILLS
    VolunteerBillsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.VOLUNTEER_BILLS_DYNAMODB_TABLE}
    # BILL TYPES
    VolunteerBillTypesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.VOLUNTEER_BILLTYPES_DYNAMODB_TABLE}
    # BILL ACTIONS
    VolunteerBillActionsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.VOLUNTEER_BILLACTIONS_DYNAMODB_TABLE}
    # BILL VERSIONS
    VolunteerVersionsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.VOLUNTEER_BILLVERSIONS_DYNAMODB_TABLE}
    # BILL CATEGORIES
    VolunteerBillCategoriesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.VOLUNTEER_BILLCATEGORIES_DYNAMODB_TABLE}
    # CONGRESS MEMBER - ROLES
    VolunteerRolesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.VOLUNTEER_ROLES_DYNAMODB_TABLE}
    # TASKS
    VolunteerTasksDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.VOLUNTEER_TASKS_DYNAMODB_TABLE}
    # SUBMISSIONS
    VolunteerSubmissionsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.VOLUNTEER_SUBMISSIONS_DYNAMODB_TABLE}
    # BILL DOWNLOAD TASK
    VolunteerBillDownloadTaskDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.VOLUNTEER_BILLDOWNLOADTASK_DYNAMODB_TABLE}

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
